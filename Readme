ðŸš¨ FraudShield: Digital Threat Analysis Engine
1. Overview

FraudShield is a robust, Node.js-based backend service engineered to function as a digital guardian against online fraud, scams, and phishing attempts.

It provides a comprehensive suite of tools for user authentication, multi-vector threat analysis of text and hyperlinks, and secure data management. By leveraging a sophisticated analysis engine and a curated threat database, FraudShield calculates real-time risk scores for suspicious content, enabling proactive threat mitigation.

The system is designed for scalability and integration, offering a secure RESTful API for client applications to interface with its powerful detection capabilities.

2. Key Features

# Secure User Authentication
Implements secure user registration and login using JWT for session management and bcryptjs for password hashing.

# Profile Management
RESTful endpoints for user profile management, including profile picture uploads with multer.

# Advanced Threat Analysis Engine
Proprietary engine (analysisEngine.js) that calculates a quantitative "threat score" for text content and URLs based on multiple risk vectors.

# Multi-Vector Detection
Analyzes content against a comprehensive, multi-lingual (English, Hinglish) threat database of malicious keywords, spam messages, and fraud patterns.

# Link Authenticity Verification
Validates URLs against whitelists and blacklists, with typo-squatting detection.

# OCR-Powered Screenshot Analysis
Uses tesseract.js to extract text from user-uploaded screenshots for analysis.

# Automated Email Alert System
Integrated with nodemailer to send high-risk security alerts to registered users.

3. Project File Structure
fraudshield-project/
â”‚
â”œâ”€â”€ node_modules/                       # Installed npm packages (auto-generated)
â”‚
â”œâ”€â”€ public/
â”‚   â”œâ”€â”€ css/
â”‚   â”‚   â””â”€â”€ style.css                   # Main stylesheet
â”‚   â”‚
â”‚   â”œâ”€â”€ js/
â”‚   â”‚   â”œâ”€â”€ analyzer-animations.js      # Animations for analyzer page
â”‚   â”‚   â”œâ”€â”€ analyzer.js                 # Client-side logic (Analyzer)
â”‚   â”‚   â”œâ”€â”€ animations.js               # General animations
â”‚   â”‚   â”œâ”€â”€ dashboard-animations.js     # Dashboard animations
â”‚   â”‚   â”œâ”€â”€ dashboard.js                # Client-side logic (Dashboard)
â”‚   â”‚   â”œâ”€â”€ index-animations.js         # Login page animations
â”‚   â”‚   â”œâ”€â”€ main.js                     # Core client-side script (Auth)
â”‚   â”‚   â”œâ”€â”€ profile-animations.js       # Profile animations
â”‚   â”‚   â”œâ”€â”€ profile.js                  # Profile management logic
â”‚   â”‚   â””â”€â”€ weekly-summary.js           # Summary page logic
â”‚   â”‚
â”‚   â”œâ”€â”€ uploads/
â”‚   â”œâ”€â”€ analyzer.html                   # Threat analysis tool
â”‚   â”œâ”€â”€ dashboard.html                  # User dashboard
â”‚   â”œâ”€â”€ index.html                      # Landing/Login/Registration page
â”‚   â”œâ”€â”€ profile.html                    # Profile management page
â”‚   â””â”€â”€ weekly-summary.html             # Weekly threat summaries
â”‚
â”œâ”€â”€ uploads/
â”‚
â”œâ”€â”€ .env                                # Environment variables
â”œâ”€â”€ analysisEngine.js                   # Threat score engine
â”œâ”€â”€ eng.traineddata                     # Tesseract OCR (English)
â”œâ”€â”€ hin.traineddata                     # Tesseract OCR (Hindi)
â”œâ”€â”€ fraudshield.db                      # SQLite database file
â”œâ”€â”€ mailer.js                           # Email service
â”œâ”€â”€ package.json                        # Project metadata & dependencies
â”œâ”€â”€ package-lock.json                   # Dependency lockfile
â”œâ”€â”€ schema.sql                          # Database schema
â”œâ”€â”€ server.js                           # Express server entry point
â”œâ”€â”€ threat-database.js                  # Malicious keywords database
â””â”€â”€ weblinks.js                         # Whitelist/Blacklist of domains

4. Installation Guide
4.1 Install Prerequisites

Before starting, ensure you have the following installed:

| Software       | Purpose                           | Link                             |
|----------------|-----------------------------------|----------------------------------|
| Node.js (v14+) | JavaScript runtime for the server | [nodejs.org](https://nodejs.org) |
| npm            | Package manager for Node.js       | Bundled with Node.js             |
| SQLite 3       | CLI for database creation         | [sqlite.org](https://sqlite.org) |


4.2 Install Dependencies

Run the following commands in the project root:

# 1. Express.js - Web server framework
npm install express

# 2. SQLite3 - Database driver
npm install sqlite3

# 3. Bcrypt.js - Password hashing
npm install bcryptjs

# 4. JSON Web Token - Authentication tokens
npm install jsonwebtoken

# 5. Multer - File upload handler
npm install multer

# 6. Nodemailer - Email sending service
npm install nodemailer

# 7. Tesseract.js - OCR for screenshots
npm install tesseract.js

# 8. Dotenv - Environment variable loader
npm install dotenv

# 9. CORS - Cross-origin resource sharing
npm install cors

5. Environment Configuration

Create a .env file in the project root with the following content:

# --- Database Configuration ---
DB_FILE=fraudshield.db

# --- Security & Authentication Secret Key ---
JWT_SECRET=your-super-secret-key-that-is-long-and-secure

# --- Emailer Configuration (Use a Gmail App Password) ---
EMAIL_USER=your-email@gmail.com
EMAIL_APP_PASSWORD=your-gmail-app-password


ðŸ“Œ Note: For Gmail, you must use an App Password, not your regular email password.
See Google Help: Create App Password

6. Database Setup

# Initialize the SQLite database using the schema:

sqlite3 fraudshield.db < schema.sql


If successful, a new file fraudshield.db will appear in the project root.

7. Start the Server

# Run the backend server:

npm start

# You should see:

Database connected successfully!
Server is running on port 3000


# The backend will now be live at:
ðŸ‘‰ http://localhost:3000
